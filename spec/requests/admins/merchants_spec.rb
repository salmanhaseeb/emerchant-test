# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/admins/merchants', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Merchant. As you add validations to Merchant, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      name: Faker::Name.name,
      email: Faker::Internet.unique.email,
      description: 'A randome description',
      password: '123123',
      status: 'active'
    }
  end

  let(:admin) { Admin.create(email: 'admin@admin.com', password: '123123') }

  describe 'GET /index' do
    before do
      sign_in admin
    end

    it 'renders a successful response' do
      Merchant.create! valid_attributes
      get merchants_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    before do
      sign_in admin
    end

    it 'renders a successful response' do
      merchant = Merchant.create! valid_attributes
      get merchant_url(merchant)
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    before do
      sign_in admin
    end

    it 'renders a successful response' do
      merchant = Merchant.create! valid_attributes
      get edit_merchant_url(merchant)
      expect(response).to be_successful
    end
  end

  describe 'PATCH /update' do
    before do
      sign_in admin
    end

    context 'with valid parameters' do
      let(:new_attributes) do
        {
          name: "Name updated",
          email: Faker::Internet.unique.email,
          description: 'A randome description',
          password: '123123',
          status: 'inactive'
        }
      end

      it 'updates the requested merchant' do
        merchant = Merchant.create! valid_attributes
        patch merchant_url(merchant), params: { merchant: new_attributes }
        merchant.reload
        expect(merchant.status).to eq('inactive')
        expect(merchant.name).to eq('Name updated')
      end

      it 'redirects to the merchant' do
        merchant = Merchant.create! valid_attributes
        patch merchant_url(merchant), params: { merchant: new_attributes }
        merchant.reload
        expect(response).to redirect_to(merchant_url(merchant))
      end
    end
  end

  describe 'DELETE /destroy' do
    before do
      sign_in admin
    end

    it 'destroys the requested merchant' do
      merchant = Merchant.create! valid_attributes
      expect do
        delete merchant_url(merchant)
      end.to change(Merchant, :count).by(-1)
    end

    it 'redirects to the merchants list' do
      merchant = Merchant.create! valid_attributes
      delete merchant_url(merchant)
      expect(response).to redirect_to(merchants_url)
    end

    it 'does not delete a merchant if his transactions exist' do
      merchant = Merchant.create! valid_attributes
      FactoryBot.create(:transaction, merchant: merchant)
      expect do
        delete merchant_url(merchant)
      end.to change(Merchant, :count).by(0)
    end
  end
end
